{"version":3,"sources":["counter.js"],"names":[],"mappings":";;;;;QAQgB,S,GAAA,S;kBA0CQ,c;;;;AAlDxB;AACA;AACA;AACO,IAAM,gDAAoB,mBAA1B;;AAEP;AACA;AACA;AACO,SAAS,SAAT,GAA+B;AAAA,MAAX,KAAW,uEAAH,CAAG;;AACpC,SAAO;AACL,UAAU,iBADL;AAEL,aAAU;AAFL,GAAP;AAID;;AAED;;;;;;;;AAQO,IAAM,oCAAc,SAAd,WAAc,GAAM;AAC/B,SAAO,UAAC,QAAD,EAAW,QAAX,EAAwB;AAC7B,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,iBAAW,YAAM;AACf,iBAAS,UAAU,WAAW,OAArB,CAAT;AACA;AACD,OAHD,EAGG,GAHH;AAID,KALM,CAAP;AAMD,GAPD;AAQD,CATM;;AAWA,IAAM,4BAAU;AACrB,sBADqB;AAErB;AAFqB,CAAhB;;AAKP;AACA;AACA;AACA,IAAM,sCACH,iBADG,EACkB,UAAC,KAAD,EAAQ,MAAR;AAAA,SAAmB,QAAQ,OAAO,OAAlC;AAAA,CADlB,CAAN;;AAIA;AACA;AACA;AACA,IAAM,eAAe,CAArB;AACe,SAAS,cAAT,GAAuD;AAAA,MAA9B,KAA8B,uEAAtB,YAAsB;AAAA,MAAR,MAAQ;;AACpE,MAAM,UAAU,gBAAgB,OAAO,IAAvB,CAAhB;;AAEA,SAAO,UAAU,QAAQ,KAAR,EAAe,MAAf,CAAV,GAAmC,KAA1C;AACD","file":"counter-compiled.js","sourcesContent":["// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type    : COUNTER_INCREMENT,\n    payload : value\n  }\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk!\n\n    NOTE: This is solely for demonstration purposes. In a real application,\n    you'd probably want to dispatch an action of COUNTER_DOUBLE and let the\n    reducer take care of this logic.  */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        dispatch(increment(getState().counter))\n        resolve()\n      }, 200)\n    })\n  }\n};\n\nexport const actions = {\n  increment,\n  doubleAsync\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\nconst ACTION_HANDLERS = {\n  [COUNTER_INCREMENT] : (state, action) => state + action.payload\n}\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nconst initialState = 0\nexport default function counterReducer (state = initialState, action) {\n  const handler = ACTION_HANDLERS[action.type]\n\n  return handler ? handler(state, action) : state\n}\n"]}