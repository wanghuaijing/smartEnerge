{"version":3,"sources":["CounterContainer.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;AAOA;;;;;;AAEA;;;;AAIA,IAAM,qBAAqB;AACzB,eAAY;AAAA,eAAM,wBAAU,CAAV,CAAN;AAAA,KADa;AAEzB;AAFyB,CAA3B;;AAXA;;;;;AAgBA,IAAM,kBAAkB,SAAlB,eAAkB,CAAC,KAAD;AAAA,WAAY;AAClC,iBAAU,MAAM;AADkB,KAAZ;AAAA,CAAxB;;AAIA;;;;;;;;;;;;;;kBAce,yBAAQ,eAAR,EAAyB,kBAAzB,oB","file":"CounterContainer-compiled.js","sourcesContent":["import { connect } from 'react-redux'\nimport { increment, doubleAsync } from '../modules/counter'\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nimport Counter from '../components/Counter'\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the componen t doesn't care   */\n\nconst mapDispatchToProps = {\n  increment : () => increment(1),\n  doubleAsync\n}\n\nconst mapStateToProps = (state) => ({\n  counter : state.counter\n})\n\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n"]}